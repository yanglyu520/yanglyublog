<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Yang's Blog</title><link>http://localhost:1313/</link><description>Recent content in Introduction on Yang's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 10 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml"/><item><title>Variadic Parameters and Argument Unpacking in Go</title><link>http://localhost:1313/docs/golang/basics/variadic/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/basics/variadic/</guid><description>Variadic Parameters and Argument Unpacking in Go # In Go, variadic parameters and argument unpacking/expanding involve some specific behind-the-scenes mechanisms that allow for flexible and dynamic function calls. Here&amp;rsquo;s a detailed explanation of how these mechanisms work:
Variadic Parameters # A variadic parameter allows a function to accept an arbitrary number of arguments. In Go, this is denoted by an ellipsis (...) followed by the type. For example:
func sum(numbers .</description></item><item><title>Difference between `new` and `make` in Golang</title><link>http://localhost:1313/docs/golang/basics/newvsmake/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/basics/newvsmake/</guid><description>Difference between new and make in Golang # In Go, make and new are built-in functions used for memory allocation.
make not only allocates memory but also initializes the data, which is necessary because the data types supported by make (like slices, maps, and channels) require initialization before use. On the other hand, new allocates memory space that is filled with zero values. new allocates a single block of memory, while make may allocate multiple blocks of memory.</description></item><item><title>Go Empty Struct</title><link>http://localhost:1313/docs/golang/basics/emptystruct/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/basics/emptystruct/</guid><description>Go Empty Struct # Introduction # An empty struct has zero memory allocation, same memory addresses for multiple instances, and stateless.
Zero Memory Allocation # Empty structs do not occupy memory, making them useful for memory optimization:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;unsafe&amp;#34; ) func main() { var e struct{} fmt.Println(unsafe.Sizeof(e)) // Output: 0 } Same Memory Addresses # Multiple empty structs share the same address:
package main import &amp;#34;fmt&amp;#34; func main() { var e, e2 struct{} fmt.</description></item><item><title>Leetcode 242 Valid Anagram</title><link>http://localhost:1313/docs/leetcode/data-structure/hashmap/242validanagram/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/leetcode/data-structure/hashmap/242validanagram/</guid><description>Leetcode 242: Valid Anagram # In this post, we will discuss how to solve the popular LeetCode problem: &amp;ldquo;Valid Anagram&amp;rdquo;. This problem requires us to determine if two given strings are anagrams of each other. Two strings are anagrams if they contain the same characters with the same frequencies.
Problem Statement # Given two strings s and t, write a function isAnagram(s string, t string) bool that returns true if t is an anagram of s, and false otherwise.</description></item><item><title>Understanding Closure Functions in Go</title><link>http://localhost:1313/docs/golang/basics/closure/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/basics/closure/</guid><description>Understanding Closure Functions in Go # In Go, closure functions are powerful constructs that allow functions to capture and remember the variables from their surrounding scope even after that scope has exited. This capability is essential for creating more dynamic, flexible, and maintainable code. Let’s delve into closure functions with a simple example, understand why variables like sum are escaped to the heap, and explore their use cases in the standard library and web API development.</description></item><item><title>What Happens When You Put a URL in Your Browser?</title><link>http://localhost:1313/docs/cs/internet/t2/</link><pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/cs/internet/t2/</guid><description>What Happens When You Put a URL in Your Browser? # Understanding what happens when you type a URL into your browser and hit enter is essential for grasping the basics of web technology. Here’s a detailed step-by-step breakdown of the process.
1. URL Entry and Parsing # Input and Validation: When you enter a URL in the address bar, the browser first validates the URL to ensure it&amp;rsquo;s properly formatted.</description></item><item><title>What Happens When You Put a URL in Your Browser?</title><link>http://localhost:1313/docs/cs/operating-system/t2/</link><pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/cs/operating-system/t2/</guid><description>What Happens When You Put a URL in Your Browser? # Understanding what happens when you type a URL into your browser and hit enter is essential for grasping the basics of web technology. Here’s a detailed step-by-step breakdown of the process.
1. URL Entry and Parsing # Input and Validation: When you enter a URL in the address bar, the browser first validates the URL to ensure it&amp;rsquo;s properly formatted.</description></item><item><title>What Happens When You Put a URL in Your Browser?</title><link>http://localhost:1313/docs/cs/relational-db/t2/</link><pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/cs/relational-db/t2/</guid><description>What Happens When You Put a URL in Your Browser? # Understanding what happens when you type a URL into your browser and hit enter is essential for grasping the basics of web technology. Here’s a detailed step-by-step breakdown of the process.
1. URL Entry and Parsing # Input and Validation: When you enter a URL in the address bar, the browser first validates the URL to ensure it&amp;rsquo;s properly formatted.</description></item><item><title>How to implement set using Greedy in golang?</title><link>http://localhost:1313/docs/golang/basics/set/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/basics/set/</guid><description>How to Implement Set Using HashMap in Golang # 1. What is a Set? How is Set Different from HashMap? # A set is a data structure that stores a collection of unique elements. Sets do not allow duplicate values and do not maintain any particular order of the elements.
A hashmap is a data structure that stores key-value pairs. Each key in a hashmap is unique, and it maps to a specific value.</description></item><item><title>How to use golang fmt package?</title><link>http://localhost:1313/docs/golang/basics/fmt/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/basics/fmt/</guid><description>formatting verbs # %s vs %q? Answer: %s prints the string without enclosing it in quotes. %q prints the string enclosed in double quotes, %q can print string, byte slice, runes and int. %v vs %+v vs %#v? Answer: %v: Default format, prints the value as is. For structs, it prints only the field values. %+v: Detailed format, includes field names in structs. %#v: Go-syntax representation, includes type information and can be used to recreate the value in Go code.</description></item><item><title>Quick tutorial on blog web with hugo and netlify</title><link>http://localhost:1313/posts/hugosite/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/hugosite/</guid><description>How to Create a Blog with Hugo and Deploy on Netlify # Creating a blog with Hugo and deploying it on Netlify is a streamlined and efficient process. Hugo is a powerful static site generator that allows for quick and easy website development. Netlify provides seamless deployment and hosting for static sites. Here&amp;rsquo;s a step-by-step guide to get your blog up and running.
Prerequisites # Install Hugo by following the installation guide.</description></item><item><title>Setting Up a New Domain for Your Netlify Website</title><link>http://localhost:1313/posts/domain/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/domain/</guid><description>Setting Up a New Domain for Your Netlify Website # Setting up a custom domain for your Netlify website helps in branding and makes it easier for users to find your site. Here’s a step-by-step guide on how to set up a new domain for your Netlify website.
Step 1: Purchase a Domain # First, you need to purchase a domain from a domain registrar. Some popular domain registrars include:</description></item><item><title/><link>http://localhost:1313/docs/leetcode/data-structure/linkedlist/23mergeklists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/leetcode/data-structure/linkedlist/23mergeklists/</guid><description> leetcode 23: merge k sorted linked list # Caesorum illa tu sentit micat vestes papyriferi #</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/buttons/</guid><description> Buttons # Buttons are styled links that can lead to local page or external link.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/columns/</guid><description>Columns # Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/details/</guid><description>Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example # {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content # Lorem markdownum insigne&amp;hellip;</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/expand/</guid><description>Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example # Default # {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Expand ↕ Markdown content # Lorem markdownum insigne&amp;hellip;
With Custom Label # {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Custom Label ... Markdown content # Lorem markdownum insigne.</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/hints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/hints/</guid><description>Hints # Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example # Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/mermaid/</guid><description>Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.
Override Mermaid Initialization Config
To override the initialization config for Mermaid, create a mermaid.json file in your assets folder!
Example # {{&amp;lt; mermaid class=&amp;#34;optional&amp;#34; &amp;gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --&amp;gt; State2 note left of State2 : This is the note to the left.</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/section/first-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/section/first-page/</guid><description>First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/section/second-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/section/second-page/</guid><description>Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/tabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/tabs/</guid><description>Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example # MacOS MacOS # This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title>KaTeX</title><link>http://localhost:1313/docs/shortcodes/katex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/katex/</guid><description>KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example # {{&amp;lt; katex display=true class=&amp;#34;optional&amp;#34; &amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt; /katex &amp;gt;}} \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Display Mode Example # Here is some inline example: \(\pi(x)\) , rendered in the same line. And below is display example, having display: block \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Text continues here.</description></item></channel></rss>