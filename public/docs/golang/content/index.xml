<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yang's Blog</title><link>http://localhost:1313/docs/golang/content/</link><description>Recent content on Yang's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 28 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/docs/golang/content/index.xml" rel="self" type="application/rss+xml"/><item><title>How to implement set using hashmap in golang?</title><link>http://localhost:1313/docs/golang/content/set/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/content/set/</guid><description>How to Implement Set Using HashMap in Golang # 1. What is a Set? How is Set Different from HashMap? # A set is a data structure that stores a collection of unique elements. Sets do not allow duplicate values and do not maintain any particular order of the elements.
A hashmap is a data structure that stores key-value pairs. Each key in a hashmap is unique, and it maps to a specific value.</description></item><item><title>How to use golang fmt package?</title><link>http://localhost:1313/docs/golang/content/fmt/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/content/fmt/</guid><description>formatting verbs # %s vs %q? Answer: %s prints the string without enclosing it in quotes. %q prints the string enclosed in double quotes, %q can print string, byte slice, runes and int. %v vs %+v vs %#v? Answer: %v: Default format, prints the value as is. For structs, it prints only the field values. %+v: Detailed format, includes field names in structs. %#v: Go-syntax representation, includes type information and can be used to recreate the value in Go code.</description></item></channel></rss>