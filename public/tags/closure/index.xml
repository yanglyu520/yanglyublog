<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Closure on Yang's Blog</title><link>http://localhost:1313/tags/closure/</link><description>Recent content in Closure on Yang's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 09 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/closure/index.xml" rel="self" type="application/rss+xml"/><item><title>Closure Functions</title><link>http://localhost:1313/docs/golang/basics/closure/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/basics/closure/</guid><description>Understanding Closure Functions in Go In Go, closure functions are powerful constructs that allow functions to capture and remember the variables from their surrounding scope even after that scope has exited. This capability is essential for creating more dynamic, flexible, and maintainable code. Letâ€™s delve into closure functions with a simple example, understand why variables like sum are escaped to the heap, and explore their use cases in the standard library and web API development.</description></item></channel></rss>