<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Struct on Yang's Blog</title><link>http://localhost:1313/tags/struct/</link><description>Recent content in Struct on Yang's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 09 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/struct/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Empty Struct</title><link>http://localhost:1313/docs/golang/basics/emptystruct/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/basics/emptystruct/</guid><description>Go Empty Struct # Introduction # In Go, an empty struct struct{} can be puzzling. This article explores the empty struct&amp;rsquo;s properties and uses. An empty struct has zero memory allocation, identical addresses for multiple instances, and statelessness.
Zero Memory Allocation # Empty structs do not occupy memory, making them useful for memory optimization:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;unsafe&amp;#34; ) func main() { var e struct{} fmt.Println(unsafe.Sizeof(e)) // Output: 0 } Identical Addresses # Multiple empty structs share the same address:</description></item></channel></rss>