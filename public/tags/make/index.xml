<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Make on Yang's Blog</title><link>http://localhost:1313/tags/make/</link><description>Recent content in Make on Yang's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 09 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/make/index.xml" rel="self" type="application/rss+xml"/><item><title>Difference between `new` and `make` in Golang</title><link>http://localhost:1313/docs/golang/basics/newvsmake/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/golang/basics/newvsmake/</guid><description>Difference between new and make in Golang # In Go, new and make are used for memory allocation but serve different purposes.
new # Purpose: Allocates memory without initializing it. Usage: For basic types like integers, structs, and arrays. Returns: A pointer to the allocated type. Example:
package main import &amp;#34;fmt&amp;#34; func main() { p := new(int) fmt.Println(*p) // 0 *p = 42 fmt.Println(*p) // 42 type Person struct { Name string Age int } person := new(Person) fmt.</description></item></channel></rss>